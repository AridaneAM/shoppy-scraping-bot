import collections

result = [[11111, 'product2', 2],
        [11111, 'product3', 1000],
        [22222, 'product2', 2],
        [33333, 'product1', 1],
        [33333, 'product3',1000]]
        
result2 = {
    "product2": [11111, 22222],
    "product3": [22222, 33333],
    "product1": [33333]
}

def algorithm():
    products_dict = {}
    for row in result:
        if row[1] not in products_dict:
            products_dict[row[1]] = []
        products_dict[row[1]].append(row[0])
    return products_dict
    
print(algorithm())
print(result2)


BEGIN TRANSACTION;

-- /start 
----Check if user exists (tel_chat_id)
----Insert user (tel_chat_id)

-- /add
---- Check if product exists  (product)
---- Insert product (product)
---- Check if notification exists (tel_chat_id, product)
---- Insert notification (tel_chat_id, product)

-- /remove
---- Retrieve products info with notification of user(tel_chat_id)
---- Remove notification (tel_chat_id, product)   

-- /list
---- Retrieve products info with notification of user(tel_chat_id)

-- periodic Job
---- obeneter lista de product con tel_chat_id para hacer scripting y enviar a usuarios
---- si no est치 producto en ninguna notficiacion, -> borrar
---- actualizar stock y titulo de producto en tarea peri칩dica

CREATE TABLE products (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    product TEXT NOT NULL,
    last_stock INT NOT NULL,
    title TEXT NOT NULL
);

CREATE TABLE telegram_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    tel_chat_id INT NOT NULL
);

CREATE TABLE notifications (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    product_id INTEGER NOT NULL,
    telegram_user_id INTEGER NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products(id),
    FOREIGN KEY (telegram_user_id) REFERENCES telegram_users(id)
);

-- Insert product (product)
INSERT INTO products(product, last_stock, title) VALUES ('product1', 1, 'title p1');
INSERT INTO products(product, last_stock, title) VALUES ('product2', 2, 'title p2');
INSERT INTO products(product, last_stock, title) VALUES ('product3', 0, 'title p3');

-- product without notificaions
INSERT INTO products(product, last_stock, title) VALUES ('product10', 10, 'title p3');


-- Insert user (tel_chat_id)
INSERT INTO telegram_users(tel_chat_id) VALUES (11111);
INSERT INTO telegram_users(tel_chat_id) VALUES (22222);
INSERT INTO telegram_users(tel_chat_id) VALUES (33333);

-- Insert notification (tel_chat_id, product)
INSERT INTO notifications(product_id, telegram_user_id) VALUES (1, 1);
INSERT INTO notifications(product_id, telegram_user_id) VALUES (2, 1);
INSERT INTO notifications(product_id, telegram_user_id) VALUES (3, 1);
INSERT INTO notifications(product_id, telegram_user_id) VALUES (2, 2);
INSERT INTO notifications(product_id, telegram_user_id) VALUES (1, 3);
INSERT INTO notifications(product_id, telegram_user_id) VALUES (3, 3);

-- Retrieve products info with notification of user(tel_chat_id)
--devolver product y title de product en notification de un usuario
SELECT products.product, products.title
FROM products
INNER JOIN notifications
    ON notifications.product_id = products.id
INNER JOIN telegram_users
    ON notifications.telegram_user_id = telegram_users.id
WHERE tel_chat_id = 11111;

-- Check if product exists  (product)
SELECT id FROM telegram_users WHERE tel_chat_id = 11111;

-- Check if user exists (tel_chat_id)
SELECT id FROM products WHERE product = 'product1';

-- Check if notification exists (tel_chat_id, product)
SELECT id FROM notifications WHERE product_id = 1 AND telegram_user_id = 1;

-- Remove notification (tel_chat_id, product)   
DELETE FROM notifications WHERE product_id == 1 AND telegram_user_id = 1;

-- si no est치 producto en ninguna notficiacion, -> borrar
DELETE FROM products WHERE id NOT IN (SELECT product_id FROM notifications);

-- actualizar stock y titulo de producto en tarea peri칩dica
UPDATE products SET last_stock = 1000, title= 'newtitle'
WHERE product = 'product3';

-- obeneter lista de product con tel_chat_id para hacer scripting y enviar a usuarios
SELECT telegram_users.tel_chat_id, products.product, products.last_stock
FROM products
INNER JOIN notifications
    ON notifications.product_id = products.id
INNER JOIN telegram_users
    ON notifications.telegram_user_id = telegram_users.id
--WHERE products.product = 'product1';

